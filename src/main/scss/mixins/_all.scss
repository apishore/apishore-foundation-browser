@function dp($d){
  @return $d+'px';
}
///
/// Convert rem to pixels my multipliing to 10px
/// @param $as-multiplier - count of rems
///
/// @example
/// font-size: @@include rem(1)
///
@function rem($as-multiplier)
{
  $as-font-size: 10px;
  @return $as-multiplier * $as-font-size;
}

///
/// Clearfix
///
@mixin clearfix
{
	overflow: hidden;
	_overflow: visible;
	zoom: 1;
}

///
/// Cross browser transition-property
/// @param $property
///
@mixin transition-property($property...)
{
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}

///
/// Cross browser transition-duration
/// @param $delay
///
@mixin transition-duration($delay)
{
  transition-delay: $delay;
}

@mixin transition-timing-function($v)
{
  transition-timing-function: $v;
}

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate($rotate)
{
	transform: rotate($rotate);
}

@mixin transform($transform)
{
   transform: $transform;
}

@mixin as-remove-outline()
{
	outline:none;
}

@mixin box-sizing($v)
{
	-webkit-box-sizing: $v;
	box-sizing: $v;
}

@mixin transition($v)
{
	-webkit-transition: $v;
	transition: $v;
}

@mixin user-select($v)
{
	-webkit-user-select: $v;
	-webkit-user-select: $v;
	user-select: $v;
}

@mixin margin-selectors($before:1em, $after:1em, $start:0px, $end:0px) {
  -webkit-margin-before: $before;
  -webkit-margin-after: $after;
  -webkit-margin-start: $start;
  -webkit-margin-end: $end;
}

@mixin not-selectable($value:none) {
  -webkit-touch-callout: $value;
  -webkit-user-select: $value;
  -khtml-user-select: $value;
  -moz-user-select: $value;
  -ms-user-select: $value;
  user-select: $value;
}

@mixin input-placeholder-color($color) {
  &::-webkit-input-placeholder,
    &::-moz-placeholder,
    &:-moz-placeholder,
    &:-ms-input-placeholder {
      color: $color;
    }
}

@mixin pie-clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin as-shadow-bottom-z-1() {
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
}

@mixin as-shadow-bottom-z-2() {
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4);
}

// Mixin for a "flat" input that can be used for components that contain an input
// (datepicker, autocomplete).
@mixin as-flat-input() {
  font-size: 14px;

  box-sizing: border-box;
  border: none;
  box-shadow: none;
  outline: none;
  background: transparent;

  // The the "clear X" that IE adds to input[type="search"]
  &::-ms-clear {
    display: none;
  }
}

// Typography mixins

@mixin as-title() {
  font-size: $as-title-font-size-base;
  font-weight: 500;
  letter-spacing: 0.005em;
}

@mixin as-body-1() {
  font-size: $as-body-font-size-base;
  font-weight: 400;
  letter-spacing: 0.010em;
  line-height: rem(2);
}

@mixin as-body-2() {
  font-size: $as-body-font-size-base;
  font-weight: 500;
  letter-spacing: 0.010em;
  line-height: rem(2.4);
}

@mixin as-subhead() {
  font-size: $as-subhead-font-size-base;
  font-weight: 400;
  letter-spacing: 0.010em;
  line-height: rem(2.4);
}

@function map-to-string($map) {
  $map-str: '{';
  $keys: map-keys($map);
  $len: length($keys);
  @for $i from 1 through $len {
    $key: nth($keys, $i);
    $value: map-get($map, $key);
    $map-str: $map-str + '_' + $key + '_: _' + map-get($map, $key) + '_';
    @if $i != $len {
      $map-str: $map-str + ',';
    }
  }
  @return $map-str + '}';
}


// mixin definition ; sets LTR and RTL within the same style call
// @see https://css-tricks.com/almanac/properties/d/direction/

@mixin rtl($prop, $value, $rtl-value) {
  #{$prop}: $value;

  html[dir=rtl] & {
    #{$prop}: $rtl-value;
    unicode-bidi: embed;
  }
  body[dir=rtl] & {
    #{$prop}: $rtl-value;
    unicode-bidi: embed;
  }

  bdo[dir=rtl] {
    direction: rtl;
    unicode-bidi: bidi-override;
  }
  bdo[dir=ltr] {
    direction: ltr;
    unicode-bidi: bidi-override;
  }


}

// Position a FAB button.
@mixin fab-position($spot, $top: auto, $right: auto, $bottom: auto, $left: auto) {
  &.as-fab-#{$spot} {
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    position: absolute;
  }
}

@mixin fab-all-positions() {
  @include fab-position(bottom-right, auto, ($as-button-fab-width - $as-button-fab-padding)/2, ($as-button-fab-height - $as-button-fab-padding)/2, auto);
  @include fab-position(bottom-left, auto, auto, ($as-button-fab-height - $as-button-fab-padding)/2, ($as-button-fab-width - $as-button-fab-padding)/2);
  @include fab-position(top-right, ($as-button-fab-height - $as-button-fab-padding)/2, ($as-button-fab-width - $as-button-fab-padding)/2, auto, auto);
  @include fab-position(top-left, ($as-button-fab-height - $as-button-fab-padding)/2, auto, auto, ($as-button-fab-width - $as-button-fab-padding)/2);
}
